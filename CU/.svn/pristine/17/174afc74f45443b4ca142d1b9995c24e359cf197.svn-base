package cu.service;

import static cu.util.CuCommon.*;

import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.ranges.RangeException;

import cu.ex.Ex;
import cu.vo.Customer;
import cu.vo.Inventory;
import cu.vo.Product;

public class ServiceImpl implements Service {
	
	
	/**
	 * @author 오석호 (재고 리스트에서 품목별 구분을 위한 상수배열)
	 */
	final String[] P_TYPES = { "Drink", "Tobacco", "Fastfood", "Snack" };
	/**
	 * @author 오석호 (재고 리스트)
	 */
	List<Product> inventories = new Inventory().getInventories();

	// 곽승협 회원 가입용 어레이 리스트 추가 08.01
	
	int no=1;
	List<Customer> customers = new ArrayList<Customer>();
	Customer customer;
	{ // customer에서 custoners로 수정 21.08.06 이유림
		Customer cc = new Customer(no++, "user", "1234", 30, "test1", 1000000);
		customers.add(cc);
		customers.add(new Customer(no++, "admin", "1234", 25, "test", 100000, true));
		customers.add(new Customer(no++, "1111", "1111", 30, "관리자", 1000000, true));
		

	}
	ArrayList<Customer> BlackList = new ArrayList<Customer>();
	/*
	 * 손요한 21.07.30 관리자 물품 조회 메소드
	 */
	public void list() {
		int a = kind() - 1;
		for (Product p : inventories) {
			if (p.getClass().getSimpleName().equals(P_TYPES[a])) {
				System.out.println(p);
			}
		}
	}

	/**
	 * @author 오석호 관리자 돈 조회
	 */
	public void money() {
		System.out.println(customers.get(0).getMoney());
	}

	/**
	 * @author 오석호 (구매자 메소드),
	 */
	public void executeCustomer(Service cu) throws RangeException {

		System.out.println("┌────────────────────────────────────┐");
		int input = nextInt("│① 물품 조회 ② 구매 ③ 회원정보수정 ④이전 5종료│\n" + "└────────────────────────────────────┘");
		switch (input) {
		case 1:
			// 손님 물품 조회 (물건 번호, 이름, 가격, 개수)
			cu.inventory();
			break;
		case 2:
			// 손님 물품 구매
			cu.purchaseByCustomer();
			break;
		case 3:
			cu.secession();
			break;
		case 4:
			break;
		case 5:
			System.out.println("종료");
			Ex.End();
			return;
		default:
			break;
		}

	}

	/**
	 * @author 오석호 (관리자 메소드),
	 */
	public void executeAdmin(Service cu) {
		System.out.println("┌─────────────────────────────────────────────────────────────────────────┐");
		int input = nextInt("│① 물품 조회 ② 구매 ③ 돈 조회 ④ 재고 ⑤ 팔린 물품 통계 ⑥ 이전 ⑦회원 정보수정+ "
				+ "⑧회원 강제추방 ⑨ 종료│\n"
				+ "└─────────────────────────────────────────────────────────────────────────┘");
		switch (input) {
		case 1:
			// 관리자 물품 조회 (모든 물품리스트 (번호, 이름, 가격)
			cu.list();
			return;
		case 2:
			// 관리자 물품 구매
			cu.purchaseByAdmin();
			break;
		case 3:
			// 관리자 돈 조회
			cu.money();
			break;
		case 4:
			// 관리자 재고
			cu.inventory();
			break;
		case 5:
			// 팔린 물품 통계
			cu.statistics();
			break;
		case 6:
			break;
		case 7:
			cu.customermodify();
			break;
		case 8:
			cu.customerremove();
			break;
		case 9:
			System.out.println("종료");
			Ex.End();
			return;
//			break;
		}
	}

	/**
	 * @author 오석호 (관리자 물품 구매),
	 */
	public void purchaseByAdmin() {
		list();
		int no = nextInt("물건 번호를 입력하세요: ");
		int ea = nextInt("개수를 입력하세요>");
		Product inventories = findByInventories(no);
		Customer customer = customers.get(0);
		inventories.setEa(inventories.getEa() + ea);
		customer.setMoney((int)(customer.getMoney()- inventories.getPrice() * 0.8 * ea));
	}

	/**
	 * @author 오석호 관리자,손님 재고 조회
	 */
	public void inventory() {
		list();
	}

	/**
	 * @author 오석호 (재고 조회시 메뉴창 생성)
	 */

	public void printProduct() {
		System.out.println("===상품번호====상품명========가격========재고====");
	}

	/**
	 * @author 오석호 (1 음료 2 담배 3 신선식품 4 과자 5 종료 의 숫자반환)
	 */
	public int kind() {
	try {	System.out.println("┌───────────────────────────────────────────┐");
		int kind = nextInt("│① 음료 ② 담배 ③ 신선식품 ④ 과자 ⑤ 종료│\n" + "└───────────────────────────────────────────┘");
		return kind;
		} catch (NumberFormatException e) {
			System.out.println("숫자를 입력해주세요");	
			return kind();
		}
	}

	/**
	 * @author 오석호 재고 findBy
	 */
	public Product findByInventories(int no) {
		for (int i = 0; i < inventories.size(); i++) {
			if (no == inventories.get(i).getNo()) {
				return inventories.get(i);
			}
		}
		return null;
	}

	/**
	 * @author 손요한 손님 물품 구매
	 */
	public void purchaseByCustomer() {
		list();
		int no = nextInt("구매할 상품번호를 입력하세요.");
		int ea = nextInt("구매할 상품의 개수를 입력하세요.");
		Product inventory = findByInventories(no);
		if (no == 0) {
			System.out.println("해당 상품은 존재하지 않습니다.");
		} if (inventory.getEa() >= ea) {
			inventory.setEa(inventory.getEa() - ea);
			System.out.println("구매가 완료되었습니다.");
		} else if (inventory.getEa() == 0) {
			System.out.println("해당 상품을 익일 입고 예정입니다.");
		} else {
			System.out.println("재고가 부족합니다.");
		}
		Product statistic = findByStatistics(no);
		if(statistic!=null) {
			statistic.setEa(statistic.getEa()+ea);
			statistic.setPrice(statistic.getPrice()+inventory.getPrice()*ea);
			return;
		}
		if(inventory.getEa()!=0) {
			statistics.add(new Product(inventory.getNo()
					, inventory.getName()
					, inventory.getPrice()*ea
					, ea));
		}
	}

	/*
	 * 손요한 21.08.06 팔린풀품통계 리스트
	 */
	List<Product> statistics = new ArrayList<Product>();
	public void statistics() {
		printSoldProduct();
		for(Product p : statistics) {
			System.out.println(p);
		}
	}

	/*
	 * 손요한 21.07.31 통계 조회시 메뉴창 생성
	 */
	public void printSoldProduct() {
		System.out.println("===번호==상품명=========수익==총개수==");
	}

	// 21.8.5 곽승협 로그인 매서드 변경
	public void login() {
//		List<Customer> list = customers;
//		System.out.println(list);
		String id = nextLine("id 입력");
		String pw = nextLine("pw 입력");
		Customer c = findBy(id);
		if(c == null) {
			System.out.println("가입되어 있지 않는 ID입니다.");
			System.out.println("ID를 다시 확인해주세요");
			return;
		}
		else if(findByIdPw(id, pw) == null) {
			System.out.println("PW를 다시 확인해주세요.");
			return;
		}
		System.out.println("Cu에 오신것을 환영합니다.");
		customer = c;
		
			
		
			if(customer.isAdmin()) {
				System.out.println("1. 구매자용 2. 판매자용 3. 로그아웃");
				
			}
			else {
				System.out.println("1. 구매자용 2. 로그아웃");
			
			}
		}
		
	

//		if (!customer.contains(userid)){
//			System.out.println("아이디가 맞지않습니다 아이디를 다시 입력해주세요.");
//			return;
//		} else {
//			pw = nextLine("회원님의 패스워드를 입력해주세요");
//		}if (!customer.equals(pw)){
//			System.out.println("패스워드가 맞지않습니다 패스워드를 다시 입력해주세요.");
//			return;
//		} else {
//			System.out.println("Cu에 오신것을 환영합니다.");
//			}
//		
//		}
	// 21.8.5 곽승협 회원가입 매서드 변경
	public void add() {
		customers.add(new Customer(no++, 
				nextLine("아이디를 입력해주세요"), 
				nextLine("패스워드를 입력해주세요"), 
				nextInt("나이를 입력해주세요"),
				nextLine("이름을 입력해주세요"),
				nextInt("가진 금액을 입력해주세요")));
		for (int i = 0; i < customers.size(); i++) 
			System.out.println(customers.get(i));
		return;
	
}


//21.8.5 곽승협 가입한 회원 표시용 매서드 추가
	

	public void signUpLogin(Service cu) {
		
			System.out.println("┌────────────────────┐");
		
		int kind = nextInt("│①로그인 ② 회원가입│\n" 
						 + "└────────────────────┘");
		switch (kind) {
		case 1:
			cu.login();
			break;
		case 2:
			cu.add();
			break;
		default:
			System.out.println("잘못 입력하셨습니다. 다시 입력해주세요");
			break;
		}
		
		
	}
	

	
	public void customermodify() {
		 String modifyid =nextLine("수정할 ID를 입력해주세요. >");
	     Customer modifyident =findBy(modifyid);
		 if(modifyident==null) {
	    	  System.out.println("회원ID가 존재하지 않습니다. 다시 입력해주세요");
	    	  return;
	      } else {
	      modifyident.setPw(nextLine("수정할 PW를 입력해주세요"));
	      modifyident.setAge(nextInt("수정할 나이를 입력해주세요"));
	      modifyident.setName(nextLine("수정할 이름을 입력해주세요"));
	      modifyident.setMoney(nextInt("수정할 금액을 입력해주세요"));
	      modifyident.setId(nextLine("수정할 ID를 입력해주세요"));
	      }
	      
	   }
	public void customerremove() {
		 String modifyid =nextLine("삭제할 ID를 입력해주세요. >");
	     Customer modifyident =findBy(modifyid);
	     
		 if(modifyident==null) {
	    	  System.out.println("회원ID가 존재하지 않습니다. 다시 입력해주세요");
	    	  return;
	      } else {
	    	  System.out.printf("%s회원 블랙리스트 등재 완료%n",modifyident.getName());
	    	  BlackList.add(modifyident);
	    	  customers.remove(modifyident);
	    	  System.out.println(customers);
	    	  System.out.println(BlackList);
	      }
	}

	public void secession(){
		String modifyid =nextLine("삭제할 ID를 입력해주세요. >");
	    Customer modifyident =findBy(modifyid);
	    if(modifyident==null) {
	    	 System.out.println("회원ID가 존재하지 않습니다. 다시 입력해주세요");
	    	  return;
	    } else {
	     modifyident=findBypw(nextLine("회원님의 패스워드를 입력해주세요 >")); 
	     if(modifyident==null) {
	    	 System.out.println("패스워드가 일치하지 않습니다. 다시 입력해주세요");
	    	  return;
	     }
	     customers.remove(modifyident);
	     System.out.println(customers);
	     System.out.println("지금까지 이용해주셔서 감사합니다.");
	     return;
	    }
	}
	   public Customer findBy(String id) {
	      for (int i = 0; i < customers.size(); i++) {
	         if (id.equals(customers.get(i).getId()) ) {
	            return customers.get(i);
	         }
	      }
	      return null;
	   }
	   public Customer findBypw(String pw) {
		      for (int i = 0; i < customers.size(); i++) {
		         if (pw.equals(customers.get(i).getId()) ) {
		            return customers.get(i);
		         }
		      }
		      return null;
		   }
	   public Customer findByIdPw(String id, String pw) {
		      Customer c = findBy(id);
		      if(c == null) {
		    	  return null;
		      }
		      if(c.getPw().equals(pw)) {
		    	  return c;
		      }
		      else {
		    	  return null;
		      }
		   }

	public Product findByStatistics(int no) {
		for (int i = 0; i < statistics.size(); i++) {
			if (no == statistics.get(i).getNo()) {
				return statistics.get(i);
			}
		}
		return null;
	}

	

}
